{
	"info": {
		"_postman_id": "c7711f11-e21e-4379-a180-7137d3d63e2c",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31361073"
	},
	"item": [
		{
			"name": "Pre-req",
			"item": [
				{
					"name": "User create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"User1\",\r\n  \"email\": \"test1@mail.ru\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User 2 create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"User2\",\r\n  \"email\": \"test2@mail.ru\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Category create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"WALK\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Event create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"annotation\": \"AnnotationAnnotationAnnotationAnnotationAnnotationAnnotation\",\r\n  \"category\": 1,\r\n  \"description\": \"DescriptionDescriptionDescriptionDescriptionDescriptionDescription\",\r\n  \"eventDate\": \"2025-01-01 12:00:00\",\r\n  \"location\": {\r\n    \"lat\": 3.1415926,\r\n    \"lon\": 5.1415926\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"stateAction\": \"SEND_TO_REVIEW\",\r\n  \"title\": \"Title\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comment create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'event' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('event');\r",
							"    pm.expect(jsonData.event, '\"event\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'commentator' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('commentator');\r",
							"    pm.expect(jsonData.commentator, '\"commentator\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" field must be \"Комментарий\"').to.eql('Комментарий');    \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"Комментарий\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/events/1/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"events",
						"1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 1 update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'event' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('event');\r",
							"    pm.expect(jsonData.event, '\"event\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'commentator' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('commentator');\r",
							"    pm.expect(jsonData.commentator, '\"commentator\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" field must be \"Комментарий обновлённый\"').to.eql('Комментарий обновлённый');    \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"Комментарий обновлённый\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/events/1/comments/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"events",
						"1",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment update failed by user is not owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"Комментарий обновлённый с неверными параметрами\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2/events/1/comments/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2",
						"events",
						"1",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment create failed by empty text",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/events/1/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"events",
						"1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment create failed by text size >3000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"w4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gsegw4twtsa4gse5gs5gse5gseg\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/events/1/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"events",
						"1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment create failed by wrong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2/events/1/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2",
						"events",
						"1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment create failed by wrong event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/events/2/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"events",
						"2",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comments get by id = 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test comment 'event' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('event');\r",
							"    pm.expect(jsonData.event, '\"event\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'commentator' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('commentator');\r",
							"    pm.expect(jsonData.commentator, '\"commentator\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" field must be \"Комментарий обновлённый\"').to.eql('Комментарий обновлённый');    \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/comments/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comments get all by no params",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test comment user response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'event' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('event');\r",
							"    pm.expect(jsonData[0].event, '\"event\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'commentator' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('commentator');\r",
							"    pm.expect(jsonData[0].commentator, '\"commentator\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('text');\r",
							"    pm.expect(jsonData[0].text, '\"text\" field must be \"Комментарий обновлённый\"').to.eql('Комментарий обновлённый');    \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/1/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comments get all by from and size params",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test comment user response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'event' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('event');\r",
							"    pm.expect(jsonData[0].event, '\"event\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'commentator' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('commentator');\r",
							"    pm.expect(jsonData[0].commentator, '\"commentator\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('text');\r",
							"    pm.expect(jsonData[0].text, '\"text\" field must be \"Комментарий обновлённый\"').to.eql('Комментарий обновлённый');    \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/1/comments?from=0&size=5",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"1",
						"comments"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 1 remove failed by user is not owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/2/comments/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 1 remove",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/comments/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 2 create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
							"});\r",
							"pm.test(\"Test comment 'event' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('event');\r",
							"    pm.expect(jsonData.event, '\"event\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'commentator' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('commentator');\r",
							"    pm.expect(jsonData.commentator, '\"commentator\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" field must be \"2 Комментарий\"').to.eql('2 Комментарий');    \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"2 Комментарий\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/events/1/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"events",
						"1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 2 admin remove",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						"2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCompilation(compilation, verbose=null) {\r",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);\r",
					"    }\r",
					"\r",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {\r",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
					"    }\r",
					"    \r",
					"    async rejectEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);\r",
					"    }\r",
					"\r",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {\r",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCategory(catId, verbose=null) {\r",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCompilation(compId, verbose=null) {\r",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findEvent(eventId, verbose=null) {\r",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findUser(userId, verbose=null) {\r",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        reject(new Error('Отправлено пустое тело ответа'))\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getCompilation(...eventIds) {\r",
					"        return {\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            events: eventIds\r",
					"        };\r",
					"    }\r",
					"\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}